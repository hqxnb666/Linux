// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------- //
// step_ctrl //
// --------- //

#define step_ctrl_wrap_target 0
#define step_ctrl_wrap 7

static const uint16_t step_ctrl_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0x605f, //  1: out    y, 31                      
    0x6001, //  2: out    pins, 1                    
    0xe032, //  3: set    x, 18                      
    0xe001, //  4: set    pins, 1                    
    0x0045, //  5: jmp    x--, 5                     
    0xe000, //  6: set    pins, 0                    
    0x0087, //  7: jmp    y--, 7                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program step_ctrl_program = {
    .instructions = step_ctrl_program_instructions,
    .length = 8,
    .origin = -1,
};

static inline pio_sm_config step_ctrl_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + step_ctrl_wrap_target, offset + step_ctrl_wrap);
    return c;
}

static inline void step_ctrl_program_init(PIO pio, uint sm, uint offset, uint step_pin, uint dir_pin) {
   pio_gpio_init(pio, step_pin);
   pio_gpio_init(pio, dir_pin);
   pio_sm_set_consecutive_pindirs(pio, sm, step_pin, 1, true);
   pio_sm_set_consecutive_pindirs(pio, sm, dir_pin, 1, true);
   pio_sm_config c = step_ctrl_program_get_default_config(offset);
   sm_config_set_set_pins(&c, step_pin, 1);
   sm_config_set_out_pins(&c, dir_pin, 1);
   float div = clock_get_hz(clk_sys) / 10000000.0f;
   sm_config_set_clkdiv(&c, div);
   pio_sm_init(pio, sm, offset, &c);
   pio_sm_set_enabled(pio, sm, true);
}

#endif

